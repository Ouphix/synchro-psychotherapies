rm(list = ls(all.names = TRUE))
# Loading libraries
## For making models
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
View(data)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frmae of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
# Add date TODO
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
data$file <- NULL
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Change the vector in character and cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
# Compute the time in minutes from time in minutes and seconds for each video for Cut Before
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle1
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle2
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutFinal
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
print(CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
str(data)
str(cutFrames)
# merge the two data frames
data <- merge(data, cutFrames, by.x="family", by.y="indexList")
data <- merge(data, psycho, by.x="family", by.y="Num._ident_videos")
data$Sex <- NULL
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
View(data)
# Create a column corresponding to the phase of the video for each time limit
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
View(data)
str(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
barplot(table(data$family), col="cornflowerblue", cex.axis=0.6, cex.names=0.5, cex.lab=0.8,
main="Number of frames in each 00034 video", cex.main=0.8, ylab="Frame number",
names = families, xlab="Video Name", las=2)
```
tab <- cbind(table(is.na(data[,"father"])),table(is.na(data[,"mother"])),table(is.na(data[,"child"])))
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,12E5), ylab="Number of frames", xlab="Participant")
legend("topright", c("T", "F"), fill=terrain.colors(2), cex=0.8)
tab <- cbind(table(is.na(data[,"father"])),table(is.na(data[,"mother"])),table(is.na(data[,"child"])))
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,11E5), ylab="Number of frames", xlab="Participant")
legend("topright", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,10E5), ylab="Number of frames", xlab="Participant")
legend("topright", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,10E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,8E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=families, las=1, cex.axis = 0.4, cex.names=0.5,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
par(mar=c(5,4,2,1))
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList, x.names=c("No conflict", "Conflict"))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList, x.lab=c("No conflict", "Conflict"))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList, names.arg=c("No conflict", "Conflict"))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logChild, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logChild, na.rm=TRUE))
MeanMotionlog <- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logChild, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logChild, na.rm=TRUE))
MeanMotionlog <- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotionlog[,1:2]), beside=TRUE, ylab= "Log of Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (as.matrix(MeanMotionlog[,1:2]), beside=TRUE, ylab= "Log of Mean Motion history for each participant", col=colOrderList, names.arg=c("No conflict", "Conflict"))
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotion <- data.frame(MeanMotionNoConflict=NA, MeanMotionConflict=NA, names=NA, family=NA)
for (i in unique(data$family)){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict" & data$family==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$family==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict") & data$family==i,]$child , na.rm=TRUE))
dataAlone<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"), family= rep(i,3))
MeanMotion <- rbind(MeanMotion,dataAlone)
print(MeanMotion)
}
warnings()
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotion <- data.frame(MeanMotionNoConflict=NA, MeanMotionConflict=NA, names=NA, family=NA)
for (i in unique(data$family)){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$family==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict" & data$family==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$family==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict") & data$family==i,]$child , na.rm=TRUE))
dataAlone<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"), family= rep(i,3))
MeanMotion <- rbind(MeanMotion,dataAlone)
print(MeanMotion)
}
MeanMotion <- MeanMotion[-1,]
MeanMotion
summary(MeanMotion$MeanMotionConflict)
for (i in unique(data$family)){
print(as.matrix(data.frame(NoConflict=MeanMotion[which(MeanMotion$family==i),1], Conflict=MeanMotion[which(MeanMotion$family==i),2])))
barplot(as.matrix(data.frame(NoConflict=is.na(MeanMotion[which(MeanMotion$family==i),1]), Conflict=complete.cases(MeanMotion[which(MeanMotion$family==i),2]))))
}
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
str(MeanMotion$MeanMotionNoConflict)
MeanMotion
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4])
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4], las=2)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4], las=2, xlab=0.5)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4], las=2, x.lab=0.5)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4], las=2, cex.names=0.5)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = unique(MeanMotion[,4]), las=2, cex.names=0.5)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(5,4,2,1))
barplot (MeanMotion$MeanMotionNoConflict, col=colOrderList, names.arg = MeanMotion[,4], las=2, cex.names=0.5)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotion$MeanMotionNoConflict
MMNC <- data.frame(rep(NA, 3))
MMNC
MMNC <- data.frame(NA, NA, NA)
MMNC
MMNC <- data.frame(father=NA, mother=NA, child=NA)
MMNC
MMNC <- MMNC[-1,]
MMNC
MeanMotion$MeanMotionNoConflict
length(MeanMotion$MeanMotionNoConflict)
length(MeanMotion$MeanMotionNoConflict)/3
MMNC <- data.frame(father=NA, mother=NA, child=NA)
MMNC <- MMNC[-1,]
for (i in 1:34){
row <- c(MeanMotion$MeanMotionNoConflict[i+i*3], MeanMotion$MeanMotionNoConflict[i+1+i*3], MeanMotion$MeanMotionNoConflict[i+2+i*3])
print (row)
}
MMNC <- data.frame(father=NA, mother=NA, child=NA)
MMNC <- MMNC[-1,]
for (i in 1:34){
row <- c(MeanMotion$MeanMotionNoConflict[i+(i-1)*3], MeanMotion$MeanMotionNoConflict[i+1+(i-1)*3], MeanMotion$MeanMotionNoConflict[i+2+(i-1)*3])
print (row)
}
