hist(log(SSIConflict))
VIew(psycho)
View(psycho)
rm(list = ls(all.names = TRUE))
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time by Minute", ylim=c(0, 25E-03),
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
rm(list = ls(all.names = TRUE))
# Loading libraries
## For making models
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
## Create a csv files list with the directories
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
# delete NA created by th conversion process
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frame of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
# Compute log
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$file <- NULL
data$logChild <- log(data$childShifted)
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Change the vector in character and cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
# Compute the time in minutes from time in minutes and seconds for each video for Cut Before
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle1
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle2
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutFinal
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
# replace 1 code by male and 2 by female
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
# Clean Besancon town name with a special character
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
psycho$Num_identification <- NULL
psycho$Sex <- NULL
psycho$TASDF <- NULL
psycho$TASIF <- NULL
psycho$TASEOT<- NULL
psycho <- rename (psycho, c("Num._ident_videos" = "family"))
#View(psycho)
data <- merge(data, cutFrames, by.x="family", by.y="family")
data <- merge(data, psycho, by.x="family", by.y="family")
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
#View(data)
str(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
barplot(table(data$family), col="cornflowerblue", cex.axis=0.6, cex.names=0.5, cex.lab=0.8,
main="Number of frames in each 00034 video (barplot)", cex.main=0.8, ylab="Frame number",
names = families, xlab="Video Name", las=2)
tab <- cbind(table(is.na(data[,"father"])),table(is.na(data[,"mother"])), c(table(is.na(data[,"child"])), "TRUE"= c(0)))
tab
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
tab <- cbind(table(is.na(data[,"father"])/(25*60)),table(is.na(data[,"mother"])/(25*60)), c(table(is.na(data[,"child"])/(25*60)), "TRUE"= c(0)))
tab
table(is.na(data[,"father"])/(25*60)
table(is.na(data[,"father"])/25*60)
table(is.na(data[,"father"]/25*60))
table(is.na(data[,"father"]/(25*60))
table(is.na(data[,"father"]/(25*60)))
table(is.na(data[,"father"]))
table(is.na(data[,"father"]))/(25*60)
tab <- cbind(table(is.na(data[,"father"]))/(25*60),table(is.na(data[,"mother"]))/(25*60)), c(table(is.na(data[,"child"]))/(25*60)), "TRUE"= c(0)))
tab <- cbind(table(is.na(data[,"father"]))/(25*60),table(is.na(data[,"mother"]))/(25*60), c(table(is.na(data[,"child"]))/(25*60), "TRUE"= c(0)))
tab
8E05
8E05/(25*60)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylab="Time (by minutes of videos)", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylab="Time  of videos (by minutes)", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- all(!is.na(data[index,subject]))
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionChildList <- meanMotion("child")
MotionMotherList <- meanMotion("mother")
MotionFatherlist <- meanMotion("father")
MotionMeanDF <- rbind(MotionChildList, MotionMotherList, MotionFatherlist)
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present")
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
par(mar=c(4,4,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name")
par(mfrow=c(1,1))
fill=colOrderList, cex=0.6)
beside=FALSE,
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present")
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(4,4,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name")
par(mfrow=c(1,1))
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=families, las=1, cex.axis = 0.4, cex.names=0.5,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
hist(data$father, col="blue", main="Histogram of father motion history")
hist(data$mother, col="red", main="Histogram of mother motion history")
hist(data$child, col="green", main="Histogram of child motion history")
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(4,4,2,2))
hist(data$logFather, col="blue", las=1, main="Histogram of log of father motion history")
hist(data$logMother, col="red", las=1, xlab="Histogram of log of mother motion history", cex.axis=0.7)
hist(data$logChild, col="green", las=1, xlab="Histogram of log of child motion history", cex.axis=0.7)
par(mar=c(4,4,3,2))
boxplot(data$logFather, data$logMother, data$logChild,
names=ParticipantsList,
all videos", las=1, xlab="Participants", ylab="Motion history")
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
main= "Motion history by frame box plots (log data no filtered),
par(mar=c(1,0.5,0.5,1))
col=colOrderList,
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
par(mar=c(5,4,4,1))
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history", col=colOrderList, names.arg=c("No conflict", "Conflict"), main="Mean Motion history for each participant
TLFB <- read.csv("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/INCANT/Data/CSV/psychometry/dataCannabis.csv")
str(TLFB)
barplot(c(mean(TLFB$data.Q18_3_0), mean(TLFB$data.Q18_3_3), mean(TLFB$data.Q18_3_6), mean(TLFB$data.Q18_3_9), mean(TLFB$data.Q18_3_12)), names.arg=c("0","3","6","9","12"), main="Mean evolution of cannabis consumption
str(TLFB)
TLFB <- read.csv("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/INCANT/Data/CSV/psychometry/dataCannabis.csv")
str(TLFB)
barplot(c(mean(TLFB$data.Q18_3_0), mean(TLFB$data.Q18_3_3), mean(TLFB$data.Q18_3_6), mean(TLFB$data.Q18_3_9), mean(TLFB$data.Q18_3_12)), names.arg=c("0","3","6","9","12"), main="Mean evolution of cannabis consumption
of the 32 subjects of the INCANT Study", col="green", xlab="Months", ylab="TLFB")
```
v <- as.numeric(as.vector(TLFB[1,c(3:7)]))
plot(c(0,3,6,9,12), v, type="l", col=rainbow(nrow(TLFB))[1], main="Evolution of cannabis consumption
of the 32 subjects of the INCANT Study", xlab="Months", ylab="TLFB Score")
for (i in 2:nrow(TLFB)){
#      print(i)
v <- as.numeric(as.vector(TLFB[i,c(3:7)]))
#      print(v)
lines(c(0,3,6,9,12), v, type="l", col=rainbow(nrow(TLFB))[i])}
for (i in 1:nrow(TLFB)){
v <- as.numeric(as.vector(TLFB[i,c(3:7)]))
plot(c(0,3,6,9,12), v, type="l", col=rainbow(nrow(TLFB))[i], xlab="Time (months)", ylab="TLFB", main=paste ("Evolution of cannabis consumption for", TLFB$data.Case[i], "subject"))}
```
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- all(!is.na(data[index,subject]))
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionChildList <- meanMotion("child")
MotionMotherList <- meanMotion("mother")
MotionFatherlist <- meanMotion("father")
MotionMeanDF <- rbind(MotionChildList, MotionMotherList, MotionFatherlist)
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present")
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(4,4,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name")
par(mfrow=c(1,1))
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present", axes=FALSE)
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(4,4,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name", axes=FALSE)
par(mfrow=c(1,1))
par(mar=c(2,2,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present", axes=FALSE)
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(4,2,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name", axes=FALSE)
par(mfrow=c(1,1))
par(mar=c(2,1,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present", axes=FALSE)
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(4,1,1.5,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name", axes=FALSE)
par(mfrow=c(1,1))
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,4,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1, ylab="motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,5,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1, ylab="motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,5,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1, ylab="Motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,4,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1, ylab="Motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
