ylab="Motion history", col="blue", type="l", lty=2, lwd=0.5, ylim=c(0, 0.075))
lines(slidedFather[251:500],  col="blue", lty=1)
lines(data$child[253:502],  col="green", lty=2, lwd=0.5)
lines(slidedChild[251:500],  col="green", lty=1)
legend("topleft", c("Raw data", "Mean on sliding Interval") , lty=c(2, 1), cex=0.7)
legend("topright", ParticipantsList[c(1,3)], fill=colOrderList[c(1,3)], cex=0.7)
plot (1:50, fatherFive[51:100], type="l", col="blue",
main="Mean motion history (non overlapping 5 frames intervals) on
00034 video, between 10-20 seconds",
ylab="Motion history", xlab="Frame index (each 5 frames)", ylim=c(0, 0.075))
lines(childFive[51:100], col="green", lty=1)
legend("top", "Mean on non overlapping Interval" , lty=1, cex=0.7)
legend("topright", ParticipantsList[c(1,3)], fill=colOrderList[c(1,3)], cex=0.7)
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(5,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,5,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,5,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue", cex.lab=0.7, main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,5,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue", cex.axis=0.7, main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
#SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
str(SSIlog)
str(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
```
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
str(SSIlog)
str(cutFrames)
SSIlog <- merge(SSIlog, cutFrames, by.x="family", by.y="family")
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIlog[which(SSIlog$Time_min +0.5 >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDual <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDual
barplot(SSIDual, names.arg = c("No Conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
View(SSIlog)
SSIDual
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch
SSINoConflict
SSIConflict <- SSIConflict[!is.na(SSIConflict)]
str(SSIConflict)
SSINoConflict <- SSINoConflict[!is.na(SSINoConflict)]
str(SSINoConflict)
SSIDual <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDual
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIConflict
str(SSInoLog)
str(SSIlog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
SSIConflict
View(SSInoLog)
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
#SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
str(SSIlog)
str(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
```
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
```
View(SSInoLog)
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIConflict
str(SSInoLog)
SSInoLog$SSI<-rowSums(SSInoLog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
SSInoLog$SSI
SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI
SSInoLog[which(SSInoLog$LabelVideo=="No COnlict"),]$SSI
SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI
SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI
SSInoLog$LabelVideo
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutFinalMin),]$LabelVideo <- "Cut"
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
#SSIlogFilesList
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
#SSInoLogFilesList
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
#SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
str(SSIlog)
str(SSInoLog)
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
str(SSInoLog)
SSInoLog <- rename (SSInoLog, c("X" = "SSI-interval"))
str(SSIlog)
str(SSInoLog)
SSInoLog$SSI<-rowSums(SSInoLog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
SSIlog$SSI<-rowSums(SSIlog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
str(SSIlog)
str(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
```
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
```
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutFinalMin),]$LabelVideo <- "Cut"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIConflict
str(SSInoLog)
mean(SSIConflict, na.rm=TRUE)
SSInoLog$SSI<-rowSums(SSInoLog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI
SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI
SSInoLog$LabelVideo
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
str(SSIlog)
str(cutFrames)
SSIlog <- merge(SSIlog, cutFrames, by.x="family", by.y="family")
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIlog[which(SSIlog$Time_min +0.5 >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
str(SSIlog)
str(cutFrames)
View(cutFrames)
SSIlog <- merge(SSIlog, cutFrames, by.x="family", by.y="family")
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIlog[which(SSIlog$Time_min +0.5 >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
is.na(SSIlog$LabelVideo)
table(is.na(SSIlog$LabelVideo))
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIConflict
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutFinalMin),]$LabelVideo <- "Cut"
str(SSInoLog)
str(SSInoLog)
str(SSIlog)
SSInoLog <- rename (SSInoLog, c("video" = "family"))
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
#SSIlogFilesList
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
#SSInoLogFilesList
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSIlog$SSI<-rowSums(SSIlog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
SSInoLog <- rename (SSInoLog, c("video" = "family"))
SSInoLog <- rename (SSInoLog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
#SSInoLog[which(video == & timeMin==)]$action
SSInoLog$SSI<-rowSums(SSInoLog[, c("SSI_fa_ch", "SSI_mo_ch")], na.rm=T)
str(SSIlog)
str(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
```
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSInoLog[which(SSInoLog$Time_min >= SSInoLog$CutFinalMin),]$LabelVideo <- "Cut"
View(SSInoLog)
sessionInfo()
