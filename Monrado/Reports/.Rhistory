IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frame of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
# Compute log
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
data$file <- NULL
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Change the vector in character and cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
# Compute the time in minutes from time in minutes and seconds for each video for Cut Before
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle1
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle2
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutFinal
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
# replace 1 code by male and 2 by female
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
# Clean Besancon town name with a special character
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
psycho$Num_identification <- NULL
psycho$Sex <- NULL
psycho$TASDF <- NULL
psycho$TASIF <- NULL
psycho$TASEOT<- NULL
psycho <- rename (psycho, c("Num._ident_videos" = "family"))
#View(psycho)
data <- merge(data, cutFrames, by.x="family", by.y="family")
data <- merge(data, psycho, by.x="family", by.y="family")
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
str(data)
summary(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
barplot(table(data$family), col="cornflowerblue", cex.axis=0.6, cex.names=0.5, cex.lab=0.8,
main="Number of frames in each 00034 video (barplot)", cex.main=0.8, ylab="Frame number",
names = families, xlab="Video Name", las=2)
tab <- cbind(table(is.na(data[,"father"])),table(is.na(data[,"mother"])), c(table(is.na(data[,"child"])), "TRUE"= c(0)))
tab
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- all(!is.na(data[index,subject]))
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionChildList <- meanMotion("child")
MotionMotherList <- meanMotion("mother")
MotionFatherlist <- meanMotion("father")
MotionMeanDF <- rbind(MotionChildList, MotionMotherList, MotionFatherlist)
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:17], names=families[1:17], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present")
legend("top", inset=.02, ParticipantsList,
par(mar=c(4,4,1.5,1))
beside=FALSE,
par(mar=c(1,1,1,1))
fill=colOrderList, cex=0.6)
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name")
par(mfrow=c(1,1))
barplot(MotionMeanDF[,18:34], names=families[18:34], las=1, cex.axis = 0.4, cex.names=0.5,
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=families, las=1, cex.axis = 0.4, cex.names=0.5,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,3,3,3))
barplot(table(psycho$STAIYA_total), las=2, col="blue", main="Barplot of the STAIYA scores")
hist(psycho$STAIYA_total, las=1, col="blue", main="Histogram of the STAIY-A scores")
par(mar=c(3,3,3,3))
barplot(table(psycho$STAIYB_total), las=2, col="red", main="Barplot of the STAIYB scores")
hist(psycho$STAIYB_total, las=1, col="red", main="Histogram of the STAIY-B scores")
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch)
mean(SSINoConflict, na.rm=TRUE)
str(SSIlog)
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
#SSIlogFilesList
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
#SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
str(SSInoLog)
str(SSIlog)
str(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch)
mean(SSINoConflict, na.rm=TRUE)
par(mar=c(3,4,4,4))
barplot(table(cutFrames$ChildSex), col=c("red", "blue"), main ="Sex repartition, boxplot")
psycho$Birthday <- as.Date(psycho$Birthday, format="%d/%m/%y")
psycho$interview_date <- as.Date(psycho$interview_date, format="%d/%m/%y")
str(psycho$Birthday )
str(psycho$interview_date)
psycho$age <- (psycho$interview_date-psycho$Birthday)/365.25
par(mar=c(3,4,4,4))
hist(as.numeric(psycho$age), col="green", main="Histogram of the age of the teenagers")
str(psycho$age)
mean(psycho$age)
psycho$age <- as.numeric(psycho$age)
hist(psycho$age, col="green", main="Histogram of the age of the teenagers")
str(psycho$age)
mean(psycho$age)
summary(psycho$age)
sd(psycho$age)
par(mar=c(3,4,4,4))
barplot(table(cutFrames$ChildSex), col=c("red", "blue"), main ="Sex repartition, boxplot")
(table(cutFrames$ChildSex)
table(cutFrames$ChildSex)
table(cutFrames$ChildSex)
prop.table(cutFrames$ChildSex)
prop.table(cutFrames$ChildSex)
prop.table(cutFrames$ChildSex)
prop.table(table(cutFrames$ChildSex))
par(mar=c(4,3,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Bar plot of attachement style after clustering")
prop.table(table(psycho$attachement_cluster))
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch)
mean(SSINoConflict, na.rm=TRUE)
SSINoConflict
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
barplot(c(SSIConflict, SSINoConflict))
barplot(c(mean(SSIConflict), mean(SSINoConflict))
barplot(c(mean(SSIConflict), mean(SSINoConflict)))
SSIDUal <- c(mean(SSIConflict), mean(SSINoConflict))
barplot(SSIDUal)
SSIDUal
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal)
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal)
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"))
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue")
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without Conflict and with Conflict")
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI
without Conflict and with Conflict")
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
str(SSInoLog)
View(SSIlog)
View(SSInoLog)
str(SSIlog)
str(SSIlog)
str(SSIlog)
str(cutFrames)
SSIDUal
SSIDual <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDual
barplot(SSIDual, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
cor(SSIDual)
cor.test(SSIDual)
cor.test(SSIDual[1], SSIDUal[2])
t.test(SSIDual)
t.test(SSIDual, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
t.test(SSIDual, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
SSIDual
t.test(SSIDual[1], SSIDual[2], alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
t.test(SSIDual)
t.test(SSIDual,  alternative = c("two.sided"))
t.test(SSIDual,  alternative = c("two.sided"), paired=TRUE)
t.test(SSIDual[1], SSIDual[2],  alternative = c("two.sided"), paired=TRUE)
SSIDual[1]
SSIDual[1]
SSIDual[2]
SSIDual[[2]]
t.test(SSIDual[[1]], SSIDual[[2]],  alternative = c("two.sided"), paired=TRUE)
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
SSIConflict
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch)
SSIConflict
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch)
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
str(SSIlog)
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDUal <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDUal
barplot(SSIDUal, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
str(SSIlog)
str(cutFrames)
SSIlog <- merge(SSIlog, cutFrames, by.x="family", by.y="family")
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min > SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min > SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min > SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch)
mean(SSINoConflict, na.rm=TRUE)
SSIDual <- c(mean(SSIConflict, na.rm=TRUE), mean(SSINoConflict, na.rm=TRUE))
SSIDual
barplot(SSIDual, names.arg = c("No conflict", "Conflict"), col="cornflowerblue", main="Comparaison between SSI without
Conflict and with Conflict")
SSIDual
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No conflict"),]$SSI_mo_ch
SSINoConflict
str(SSIlog)
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch
SSINoConflict
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
complete.cases(SSIConflict)
is.na(SSIConflict)
SSIConflict(!is.na(SSIConflict))
SSIConflict[!is.na(SSIConflict)]
SSINoConflict[!is.na(SSINoConflict)]
SSIConflict <- SSIConflict[!is.na(SSIConflict)]
SSINoConflict <- SSINoConflict[!is.na(SSINoConflict)]
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
str(SSIConflict)
str(SSINoConflict)
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch
SSINoConflict
SSIConflict <- SSIConflict[!is.na(SSIConflict)]
str(SSIConflict)
SSINoConflict <- SSINoConflict[!is.na(SSINoConflict)]
str(SSINoConflict)
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
SSINoConflict
str(SSIConflict)
str(SSINoConflict)
View(SSIlog)
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch
SSINoConflict
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch
SSINoConflict
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch
SSINoConflict
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIlog[which(SSIlog$Time_min >= SSIlog$CutFinal),]$LabelVideo <- "Cut"
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutFinal),]$LabelVideo <- "Cut"
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutFinal),]$LabelVideo <- "Cut"
SSIlog$LabelVideo <- rep(NA, nrow(SSIlog))
SSIlog[which(SSIlog$Time_min < SSIlog$CutBeforeMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutBeforeMin & SSIlog$Time_min < SSIlog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle1Min & SSIlog$Time_min < SSIlog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutMiddle2Min & SSIlog$Time_min < SSIlog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIlog[which(SSIlog$Time_min >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
SSIConflict <- c(SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch)
SSIlog[which(SSIlog$Time_min +1 >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
SSIlog[which(SSIlog$Time_min +0.5 >= SSIlog$CutFinalMin),]$LabelVideo <- "Cut"
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_fa_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_fa_ch
SSINoConflict
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict"),]$SSI_mo_ch
SSIConflict
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict"),]$SSI_mo_ch
SSINoConflict
SSIConflict
SSINoConflict
SSIConflict <- SSIlog[which(SSIlog$LabelVideo=="Conflict" & SSIlog$family=="1606"),]$SSI_mo_ch
SSINoConflict <- SSIlog[which(SSIlog$LabelVideo=="No Conflict" & SSIlog$family=="1606"),]$SSI_mo_ch
SSIConflict
SSINoConflict
t.test(SSIConflict, SSINoConflict, alternative = c("two.sided"), paired=TRUE, conf.level = 0.95)
