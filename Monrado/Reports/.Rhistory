hist(log(SSIConflict))
VIew(psycho)
View(psycho)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
str(SSIlog)
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
#SSIlogFilesList
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
#SSInoLogFilesList
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
#   print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
#SSInoLog[which(video == & timeMin==)]$action
str(SSInoLog)
warnings()
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
