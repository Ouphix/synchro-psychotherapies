data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frmae of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
# Add date TODO
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
data$file <- NULL
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
View(cutFrames)
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
print(CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
View(cutFrames)
str(data)
str(cutFrames)
data <- merge(data, cutFrames, by.x="family", by.y="indexList", sort=FALSE)
View(data)
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
View(data)
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE), mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE), mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE))
MeanMotionNoConflict
barplot (MeanMotionNoConflict)
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE), mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE), mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE))
barplot(MeanMotionConflict)
barplot (MeanMotionNoConflict, ylab= "Mean Motion history for each participant")
barplot(MeanMotionConflict)
barplot (MeanMotionNoConflict, ylab= "Mean Motion history for each participant")
barplot(MeanMotionConflict)
MeanMotion<- rbind(MeanMotionNoConflict, MeanMotionConflict)
View(MeanMotion)
name(MeanMotion$V1) <- "child"
names(MeanMotion$V1) <- "child"
MeanMotion
names(MeanMotion[,1]) <- "child"
MeanMotion
names(MeanMotion[,1])
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict)
MeanMotion
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("child", "father", "mother"))
MeanMotion
MeanMotion
barplot (MeanMotion, ylab= "Mean Motion history for each participant")
barplot (MeanMotionNoConflict[, 1:2], ylab= "Mean Motion history for each participant")
barplot (MeanMotionNoConflict[, c(1,2)], ylab= "Mean Motion history for each participant")
MeanMotionNoConflict[, c(1,2)]
MeanMotionNoConflict[,1:2]
MeanMotionNoConflict
MeanMotion[,1:2]
barplot (MeanMotion[,1:2], ylab= "Mean Motion history for each participant")
barplot (as.matrix(MeanMotion[,1:2]), ylab= "Mean Motion history for each participant")
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant")
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=c("green", "blue", "red"))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("child", "father", "mother"))
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=c("green", "blue", "red"))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
colOrderList
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logChild, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logChild, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Log of Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotion
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
MeanMotion
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$child, na.rm=TRUE))
MeanMotion<- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
barplot (as.matrix(MeanMotion[,1:2]), beside=TRUE, ylab= "Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
We can see that it seems to be a decrease of movement in conflict amond child but not much change among parents.
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logChild, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logChild, na.rm=TRUE))
MeanMotionlog <- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
barplot (as.matrix(MeanMotionlog[,1:2]), beside=TRUE, ylab= "Log of Mean Motion history for each participant", col=colOrderList)
legend("topleft", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
psycho <- psycho[-(38:40),]
str(psycho)
#View(psycho)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
psycho <- psycho[-(38:40),]
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
View(psycho)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
View(psycho)
View(psycho)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
str(psycho)
View(psycho)
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
View(psycho)
psycho$Sex[which(psycho$Birth_place == Besan<8d>on )] <- "Besancon"
psycho$Birth_place[which(psycho$Birth_place =="Besan<8d>on")] <- "Besancon"
psycho$Birth_place
unique(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don ")] <- "Besancon"
unique(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
psycho$Birth_place <- as.character(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
unique(psycho$Birth_place)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
unique(psycho$Birth_place)
View(psycho)
sort(unique(psycho$Birth_place))
str(psycho)
View(psycho)
str(data)
str(cutFrames)
str(psycho)
View(psycho)
names(psycho)
a <- merge(data, psycho, by.x="family", by.y="Num._ident_videos")
View(a)
View(a)
a$Sex <- NULL
View(a)
data <- merge(data, psycho, by.x="family", by.y="Num._ident_videos")
data$Sex <- NULL
data <- data[order(data$family, data$frame),]
View(data)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
```
## Create a csv files list with the directories
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frmae of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
# Add date TODO
data$file <- NULL
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Change the vector in character and cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
# Compute the time in minutes from time in minutes and seconds for each video for Cut Before
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle1
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle2
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
Cut <- c()
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
print(CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
View(cutFrames)
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
View(psycho)
str(data)
str(cutFrames)
# merge the two data frames
data <- merge(data, cutFrames, by.x="family", by.y="indexList")
data <- merge(data, psycho, by.x="family", by.y="Num._ident_videos")
data$Sex <- NULL
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
View(data)
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
str(data)
str(cutFrames)
# merge the two data frames
data <- merge(data, cutFrames, by.x="family", by.y="indexList")
data <- merge(data, psycho, by.x="family", by.y="Num._ident_videos")
data$Sex <- NULL
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
View(data)
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
str(data)
summary(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
families
length(videoLengthList)
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
view(data)
View(data)
unique(data$family)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
