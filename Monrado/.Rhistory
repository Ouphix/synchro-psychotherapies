meanMotionList <-c()
meanMotion <- function(subject){
for (i in indexList){
index <- which(data$indexList==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=indexList, las=1, cex.axis = 0.4, cex.names=0.6,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
MotionMeanDF
str(data)
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
MotionMeanDF
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=indexList, las=1, cex.axis = 0.4, cex.names=0.6,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,2,1))
hist(data$father)
hist(data$mother)
hist(data$child)
hist(log(data$father))
hist(log(data$mother))
hist(log(data$child))
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
str(data)
summary(logFather)
summary(data$logFather)
data$father[which (data$father >0)]
data$father[which (data$father ==0)]
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedPatient", videoName))
slidedPatient <- SlidingInterval("logPatient", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
indexList
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
dataVector <- data[which(data$indexList==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedPatient", videoName))
slidedPatient <- SlidingInterval("logPatient", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedPatient", videoName))
slidedPatient <- SlidingInterval("logPatient", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$indexList==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$indexList==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedPatient", videoName))
slidedPatient <- SlidingInterval("logPatient", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$family==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedPatient", videoName))
slidedPatient <- SlidingInterval("logPatient", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
View(data)
str(data)
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedChild", videoName))
slidedPatient <- SlidingInterval("logChild", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$family==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
videoIndex <- 1
# videoName est le nom de la video actuelle
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("logFather", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("logMother", videoIndex, 5, data)
print(paste("Computing slidedChild", videoName))
slidedPatient <- SlidingInterval("logChild", videoIndex, 5, data)
# create a data frame to store temporarily this data with NA
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedPatient,
"video"=rep(indexList[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
write.csv(slidedVideo, paste("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/filtered/log/",videoName, ".log.slideddata.csv", sep=""))
videoIndex <-(videoIndex+1)
}
unique(data$family)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado")
# Fix 460 line too to export data
# Not relevant data columns to delete
# if not relevant put NULL to the BOOL
dataTherapistBOOL <- NULL
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
# Fix the number of participants for ParticipantsList
FullNameList <- list.files("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/raw", full.names=TRUE)
## Create a csv files list without the directories
filesList <- list.files("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/raw", full.names=FALSE)
## Delete the extention of the video and .csv
indexList <- c()
for (i in filesList){
# a <- str_count(i)-17
#  name <- substr(i, 1, a)
name <- sub(FileExtension, "", i)
indexList <- c(indexList, name)
}
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone, 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(str(dataAlone))
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (file in indexList[indexOfvideos]){
dataVector <- data[which(data$indexList==file), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
print(borneinf)
print(bornesup)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$family==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$timeMin <- data$frame/(25*60)
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
# OR if 3 participants
ParticipantsList <- names(data[,2:4])
ParticipantsList
data$family  <- substr (data$file, 1, 5)
View(data)
uniques(data$family)
unique(data$family)
data$family  <- strsplit (data$file, ".")
data$family
data$family  <- strsplit (data$file, "a")
data$family
data$family  <- strsplit (data$file, "[.]")
data$family  <- strsplit (data$file, "[[:punct:]]")[[1]][1]
data$family
data$family  <- strsplit (data$file, "[[:punct:]]")[[1]][1]
class(data$file)
as.string(data$family)
data$family  <- strsplit (data$file, "\\.")
data$family[1]  <- strsplit (data$file, "\\.")
data$family  <- strsplit (data$file[1], "\\.")
data$family  <- strsplit (as.character(data$file), "\\.")
data$family  <- strsplit (as.character(data$file), "\\.")[1]
data$family  <- strsplit (as.character(data$file), "\\.")[[1]]
uniques(data$family)
unique(data$family)
data$family  <- strsplit (as.character(data$file), "\\.")[[1]][1]
unique(data$family)
indexList <- c()
for (i in filesList){
name <- (strsplit(i, "\\."))[[1]][1]
indexList <- c(indexList, name)
}
indexList
data$file <- NULL
data$filesList <- NULL
data$therapist <- dataTherapistBOOL
NumberOfvideos <- length(indexList)
data$timeMin <- data$frame/(25*60)
ParticipantsList <- names(data[,2:4])
print(ParticipantsList)
str(data)
summary(data)
data$family <- as.factor(data$family)
str(data)
View(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.4,
ylab="Minutes", xlab="Video Name", las=2, names=indexList,
main="Length in each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(58,20, "Mean")
videoLengthList
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.4,
ylab="Minutes", xlab="Video Name", las=2, names=indexList,
main="Length in each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(58,20, "Mean")
videoLengthList
unique(data$family
)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado")
# Fix 460 line too to export data
# Not relevant data columns to delete
# if not relevant put NULL to the BOOL
dataTherapistBOOL <- NULL
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
FullNameList <- list.files("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/raw", full.names=TRUE)
## Create a csv files list without the directories
filesList <- list.files("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/raw", full.names=FALSE)
## Delete the extention of the video and .csv
indexList <- c()
for (i in filesList){
# a <- str_count(i)-17
#  name <- substr(i, 1, a)
name <- sub(FileExtension, "", i)
indexList <- c(indexList, name)
}
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone, 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(str(dataAlone))
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (file in indexList[indexOfvideos]){
dataVector <- data[which(data$indexList==file), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
print(borneinf)
print(bornesup)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in indexList[indexOfvideos]){
print(file)
dataVector <- data[which(data$family==file), subject]
print(str(dataVector))
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf<- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$timeMin <- data$frame/(25*60)
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
ParticipantsList <- names(data[,2:4])
unique(data$family)
data$family  <- strsplit (as.character(data$file), "\\.")[[1]][1]
unique(data$family)
unique(data$file)
for (i in unique (data$file))
data$family[which(data$file==i),]  <- strsplit (as.character(  data[which(data$file==i),]$file), "\\.")[[1]][1]
data$family <- as.factor(data$family)
for (i in unique (data$file)){
data$family[which(data$file==i),]  <- strsplit (as.character(  data[which(data$file==i),]$file), "\\.")[[1]][1]}
for (i in unique (data$file)){
print(i)
data$family[which(data$file==i),]  <- strsplit (as.character(  data[which(data$file==i),]$file), "\\.")[[1]][1]}
data$family <- as.factor(data$family)
for (i in unique (data$file)){
print(i)
data[which(data$file==i),]$family  <- strsplit (as.character(  data[which(data$file==i),]$file), "\\.")[[1]][1]}
warinings()
warnings()
unique(data$family)
for (i in unique (data$file)){
print(i)
length(i)
data[which(data$file==i),]$family  <- (data[which(data$file==i),]$file, 1, (length(i)-16)}
for (i in unique (data$file)){
print(i)
length(i)
data[which(data$file==i),]$family  <- (data[which(data$file==i),]$file, 1, (length(i)-16))}
for (i in unique (data$file)){
print(i)
a <- str_count(i)
data[which(data$file==i),]$family  <- (data[which(data$file==i),]$file, 1, (a-16))}
