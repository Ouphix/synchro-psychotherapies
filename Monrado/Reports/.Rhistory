str(data)
summary(data)
videoLengthList <-c()
for (i in unique(data$family)){
index <- which(data$family==i)
videolength <- max(data$timeMin[index])
videoLengthList <-c(videoLengthList,videolength)}
par(mar=c(4,4,3,1))
barplot(videoLengthList, col="cornflowerblue", cex.axis=0.6, cex.names=0.5,
ylab="Minutes", xlab="Video Name", las=2, names=families,
main="Length of each video (min)")
abline(h = mean(videoLengthList), lwd=2, lty=2)
text(5,14.5, "Mean", cex=1)
barplot(table(data$family), col="cornflowerblue", cex.axis=0.6, cex.names=0.5, cex.lab=0.8,
main="Number of frames in each 00034 video", cex.main=0.8, ylab="Frame number",
names = families, xlab="Video Name", las=2)
main="Number of frames in each 00034 video (barplot)", cex.main=0.8, ylab="Frame number",
names = families, xlab="Video Name", las=2)
tab <- cbind(table(is.na(data[,"father"])),table(is.na(data[,"mother"])), c(table(is.na(data[,"child"])), "TRUE"= c(0)))
tab
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
par(mar=c(4,4,2,1))
barplot(tab, cex.axis = 0.7, las=2, names=ParticipantsList,
main="Number of available data by participant (barplot)",
beside=TRUE, las=1, col=terrain.colors(2), ylim=c(0,9E5), ylab="Number of frames", xlab="Participant")
legend("topleft", c("T", "F"), fill=terrain.colors(2), cex=0.8)
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- all(!is.na(data[index,subject]))
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionChildList <- meanMotion("child")
MotionMotherList <- meanMotion("mother")
MotionFatherlist <- meanMotion("father")
MotionMeanDF <- rbind(MotionChildList, MotionMotherList, MotionFatherlist)
par(mar=c(2,4,2,1), mfrow=c(2,1))
barplot(MotionMeanDF[,1:14], names=families[1:14], las=1, cex.axis = 0.4, cex.names=0.5,
main="Configuration of participant by video", beside=FALSE, ylim=c(0,3),
col= c("green", "red", "blue"), las=2, ylab="Suject present")
par(mar=c(1,1,1,1))
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
barplot(MotionMeanDF[,15:27], names=families[15:27], las=1, cex.axis = 0.4, cex.names=0.5,
par(mar=c(4,4,1.5,1))
beside=FALSE,
col= c("green", "red", "blue"), las=2, ylab="Suject present", xlab="Video name")
par(mfrow=c(1,1))
meanMotionList <-c()
meanMotion <- function(subject){
for (i in unique(data$family)){
index <- which(data$family==i)
Motionsubject<- mean(data[index,subject], na.rm=TRUE)
meanMotionList <-c(meanMotionList, Motionsubject)}
return (meanMotionList)}
MotionFatherlist <- meanMotion("father")
MotionMotherList <- meanMotion("mother")
MotionChildList <- meanMotion("child")
MotionMeanDF <- rbind(MotionFatherlist, MotionMotherList, MotionChildList)
par(mar=c(5,4,2,1))
barplot(MotionMeanDF, names=families, las=1, cex.axis = 0.4, cex.names=0.5,
main="Mean Motion history in each video", beside=TRUE,
col=colOrderList, las=2, ylab="Mean motion history", xlab="Video name")
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,2,1))
hist(data$father, col="blue", main="histogram of father motion history")
hist(data$mother, col="red", main="histogram of mother motion history")
hist(data$child, col="green", main="histogram of child motion history")
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(4,4,2,2))
hist(data$logFather, col="blue", las=1, xlab="Log of father motion history")
hist(data$logMother, col="red", las=1, xlab="Log of mother motion history", cex.axis=0.7)
hist(data$logChild, col="green", las=1, xlab="Log of child motion history", cex.axis=0.7)
par(mar=c(4,4,2,2))
hist(data$logFather, col="blue", las=1, main="Histogram of log of father motion history")
hist(data$logMother, col="red", las=1, xlab="Histogram of log of mother motion history", cex.axis=0.7)
hist(data$logChild, col="green", las=1, xlab="Histogram of log of child motion history", cex.axis=0.7)
par(mar=c(4,4,3,2))
boxplot(data$logFather, data$logMother, data$logChild,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data),
all videos", las=1, xlab="Participants", ylab="Motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(4,4,3,2))
boxplot(data$logFather, data$logMother, data$logChild,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (log data no filtered),
all videos", las=1, xlab="Participants", ylab="Motion history")
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
par(mar=c(3,3,2,2))
boxplot(data$father, data$mother, data$child,
col=colOrderList,
names=ParticipantsList,
main= "Motion history by frame box plots (raw data), all videos", las=1)
par(mar=c(1,0.5,0.5,1))
legend("topleft", ParticipantsList, fill=colOrderList, cex=0.7)
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$logChild, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"),]$logFather, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logMother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"),]$logChild, na.rm=TRUE))
MeanMotionlog <- data.frame(MeanMotionNoConflict, MeanMotionConflict, names=c("father", "mother", "child"))
MeanMotion
par(mar=c(5,4,4,1))
barplot (as.matrix(MeanMotionlog[,1:2]), beside=TRUE, ylab= "Log of Mean Motion history", col=colOrderList, names.arg=c("No conflict", "Conflict"), main = "Log of Mean Motion history for each participant
without and with conflict")
legend("top", inset=.02, ParticipantsList,
fill=colOrderList, cex=0.6)
par(mar=c(3,3,4,1))
hist(data[which(data$LabelVideo=="No Conflict"),]$logFather, col="blue", main= "Motion History histogram for father, no conflict", xlab= "")
hist(data[which(data$LabelVideo=="No Conflict"),]$logMother, col="red", main= "Motion History histogram for mother, no conflict", xlab= "")
hist(data[which(data$LabelVideo=="No Conflict"),]$logChild, col="green", main= "Motion History histogram for child, no conflict", xlab= "")
hist(data[which(data$LabelVideo=="Conflict"),]$logFather, col="blue", main= "Motion History histogram for father, in conflict", xlab= "")
hist(data[which(data$LabelVideo=="Conflict"),]$logMother, col="red", main= "Motion History histogram for mother, in conflict", xlab= "")
hist(data[which(data$LabelVideo=="Conflict"),]$logChild, col="green", main= "Motion History histogram for child, in conflict", xlab= "")
table(psycho$attachement_cluster)
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(5,4,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(2,3,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(5,4,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(2,3,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(2,3,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(3,3,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(3,3,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(4,3,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(4,3,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
attachementStyles <- c("FE", "Secure", "Withdrawn", "DU")
for (i in attachementStyles){
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
MeanMotionConflict <- c(
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$father , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict"& data$attachement_cluster==i),]$mother , na.rm=TRUE),
mean(data[which(data$LabelVideo=="Conflict" & data$attachement_cluster==i),]$child, na.rm=TRUE))
#print(i)
#print (MeanMotionNoConflict)
#print (MeanMotionConflict)
par(mar=c(2.5,4,4,1))
barplot (MeanMotionNoConflict, beside=FALSE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
without conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
par(mar=c(2.5,4,4,1))
barplot (MeanMotionConflict, beside=TRUE, ylab = "Mean Motion history", col=colOrderList, main=paste("Mean Motion history for each participant
with conflict, attachement cluster", i))
par(mar=c(1,0.5,0.5,1))
legend("top", inset=.05, ParticipantsList,
fill=colOrderList, cex=0.7)
}
slidedFather <- SlidingInterval("father", 1 , 5, data)
slidedChild <- SlidingInterval("child", 1 , 5, data)
summary(slidedFather)
summary(slidedChild)
fatherFive <- MeanMotionByTime("father", indexOfvideos=1, interval=5, data)
childFive <- MeanMotionByTime("child", indexOfvideos=1, interval=5, data)
summary(childFive)
summary(fatherFive)
par(mar=c(4,4,4,2))
plot(1:250, data$father[3:252], main="Mean motion history (Sliding 5 frames interval)
on 00034 video, first 10 seconds ", xlab="Frame index (25/s)",
ylab="Motion history",
col="blue", type="l", lty=2, lwd=0.5, ylim=c(0, 0.075))
lines(slidedFather[1:250],  col="blue", lty=1)
lines(slidedChild[1:250],  col="green", lty=1)
lines(data$child[3:252],  col="green", lty=2, lwd=0.5)
legend("topleft", c("Raw data", "Mean on sliding Interval"), lty=c(2, 1), cex=0.7)
legend("topright", ParticipantsList[c(1,3)], fill=colOrderList[c(1,3)], cex=0.7)
par(mar=c(4,4,4,2))
plot (1:50, fatherFive[1:50], type="l", col="blue",
main="Mean Motion history (non overlapping 5 frames
intervals) for father on 00034 video, first 10 seconds",
ylab="Motion history", xlab="Frame index (each 5 frames)", ylim=c(0, 0.075))
lines(childFive[1:50], col="green", lty=1)
legend("topleft", "Mean on non overlapping Interval" , lty=1, cex=0.7)
legend("topright", ParticipantsList[c(2,3)], fill=colOrderList[2:3], cex=0.7)
par(mar=c(4,4,4,2))
plot(1:250, data$father[253:502], main="Mean motion history (Sliding 5 frames
interval) for father on 00034 video, 10-20 seconds", xlab="Frame index (25/s)",
ylab="Motion history", col="blue", type="l", lty=2, lwd=0.5, ylim=c(0, 0.075))
lines(slidedFather[251:500],  col="blue", lty=1)
lines(data$child[253:502],  col="green", lty=2, lwd=0.5)
lines(slidedChild[251:500],  col="green", lty=1)
legend("topleft", c("Raw data", "Mean on sliding Interval") , lty=c(2, 1), cex=0.7)
legend("topright", ParticipantsList[c(1,3)], fill=colOrderList[c(1,3)], cex=0.7)
plot (1:50, fatherFive[51:100], type="l", col="blue",
main="Mean motion history (non overlapping 5 frames intervals) on
00034 video, between 10-20 seconds",
ylab="Motion history", xlab="Frame index (each 5 frames)", ylim=c(0, 0.075))
lines(childFive[51:100], col="green", lty=1)
legend("top", "Mean on non overlapping Interval" , lty=1, cex=0.7)
legend("topright", ParticipantsList[c(1,3)], fill=colOrderList[c(1,3)], cex=0.7)
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 25E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 30E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 33E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 40E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
for (i in 1:NumberOfvideos){
fatherMinute<- MeanMotionByTime("father", indexOfvideos=i, interval=250, data)
motherMinute<- MeanMotionByTime("mother", indexOfvideos=i, interval=250, data)
childMinute<- MeanMotionByTime("child", indexOfvideos=i, interval=250, data)
par(mar=c(4,4,4,2))
plot ((1:length(fatherMinute)/6), fatherMinute, type="l", col="blue",
main=paste("Mean motion history (non overlaping 10 sec intervals)
on ", families[i], " video" , sep=""),
ylab="Motion history", xlab="Time (minute)", ylim=c(0, 35E-03), las=2,
xaxp=c(0, (round(length(fatherMinute)/6)), round((length(fatherMinute)/6))))
lines((1:length(fatherMinute)/6), motherMinute, col="red")
lines((1:length(fatherMinute)/6), childMinute, col="green")
legend("topleft", inset=.05, ParticipantsList[1:3],
fill=colOrderList[1:3], cex=0.7)}
videoIndex <- 1
# videoName is the name of current video
for (videoName in unique(data$family)){
# Compute slinding interval for each participant
print(paste("Computing slidedFather", videoName))
slidedFather <- SlidingInterval("father", videoIndex, 5, data)
print(paste("Computing slidedMother", videoName))
slidedMother <- SlidingInterval("mother", videoIndex, 5, data)
print(paste("Computing slidedChild", videoName))
slidedChild <- SlidingInterval("child", videoIndex, 5, data)
slidedVideo <- data.frame(
slidedFather, slidedMother, slidedChild,
"video"=rep(families[videoIndex], length(slidedFather)),
frame_index = 1:length(slidedFather))
# write the file
write.csv(slidedVideo, paste("../Data/CSV/filtered/noLog/",videoName, ".slideddata.csv", sep=""))
print("SSI Files Directory")
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
print("SSI Files Directory")
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
#SSInoLogFilesList
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
#   print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
str(SSIlog)
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
#SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
str(SSIlog)
str(SSInoLog)
#View(SSInoLog)
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSIlog$family)){
if (all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
#print(SSIlog[which(SSIlog$family==i),]$Time_min)
#print(str(SSIlog[which(SSIlog$family==i),]$SSI_mo_ch))
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col=rainbow(2)[1], cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSIlog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
plot(SSIlog[which(SSIlog$family==i),]$Time_min, SSIlog[which(SSIlog$family==i),]$SSI_fa_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSIlog[which(SSIlog$family==i),]$Time_min)), col=rainbow(2)[2], cex.axis=0.7)}
else{print("error")}}
```
par(mar=c(4,4,4,3), mfrow=c(1,1))
for (i in unique(SSInoLog$family)){
if (all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_mo_ch)==TRUE)){
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSInoLog$family==i),]$SSI_mo_ch,
ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", col="red", cex.axis=0.7, xaxp=c(0,length(SSIlog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)))}
else if(all(!is.na(SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch)==TRUE)){
#    print(str(SSInoLog[which(SSInoLog$family==i),]$SSI_fa_ch))
plot(SSInoLog[which(SSIlog$family==i),]$Time_min, SSInoLog[which(SSIlog$family==i),]$SSI_fa_ch, ylim=c(0, 0.3), main=paste("Synchrony scores in", i, "family"), xlab = "Time (minute)", ylab="Synchrony score", lwd=2, type="l", xaxp=c(0,length(SSInoLog[which(SSIlog$family==i),]$Time_min), length(SSInoLog[which(SSIlog$family==i),]$Time_min)), col="blue", cex.axis=0.7)}
else{print("error")}}
str(SSInoLog)
SSInoLog <- merge(SSInoLog, cutFrames, by.x="family", by.y="family")
SSInoLog$LabelVideo <- rep(NA, nrow(SSInoLog))
SSInoLog[which(SSInoLog$Time_min < SSInoLog$CutBeforeMin),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutBeforeMin & SSInoLog$Time_min < SSInoLog$CutMiddle1Min),]$LabelVideo <- "No Conflict"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle1Min & SSInoLog$Time_min < SSInoLog$CutMiddle2Min),]$LabelVideo <- "Cut"
SSInoLog[which(SSInoLog$Time_min > SSInoLog$CutMiddle2Min & SSInoLog$Time_min < SSInoLog$CutFinalMin),]$LabelVideo <- "Conflict"
SSIConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="Conflict"),]$SSI_mo_ch)
mean(SSIConflict, na.rm=TRUE)
SSINoConflict <- c(SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch, SSInoLog[which(SSInoLog$LabelVideo=="No Conflict"),]$SSI_mo_ch)
mean(SSINoConflict, na.rm=TRUE)
par(mar=c(3,4,4,4))
par(mar=c(3,4,4,4))
barplot(table(psycho$Sex), col=c("red", "blue"), main ="Sex repartition")
str(data)
str(psycho)
str(cutFrames)
barplot(table(cutFrames$ChildSex), col=c("red", "blue"), main ="Sex repartition")
par(mar=c(3,4,4,4))
barplot(table(cutFrames$ChildSex), col=c("red", "blue"), main ="Sex repartition, boxplot")
par(mar=c(9,5,3,3))
barplot(table(psycho$attachement_style), las=2, cex.names=0.6, col="blue")
par(mar=c(5,3,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Bar plot of attachement style after clustering")
par(mar=c(4,3,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Bar plot of attachement style after clustering")
par(mar=c(9,5,3,3))
barplot(table(psycho$insecurite_level), las=2)
