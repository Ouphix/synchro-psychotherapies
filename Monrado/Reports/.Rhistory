hist(log(SSIConflict))
VIew(psycho)
View(psycho)
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
str(SSIlog)
SSIlogFilesList <- list.files("../Data/CSV/Synchrony/log/S_estimator", full.name=TRUE)
#SSIlogFilesList
SSInoLogFilesList <- list.files("../Data/CSV/Synchrony/noLog/S_estimator", full.name=TRUE)
#SSInoLogFilesList
SSIlog <- data.frame(video="Name")
for (file in SSIlogFilesList){
SSIalone <- read.csv(file)
#   print(str(SSIalone))
SSIlog <- rbind.fill(SSIlog, SSIalone)}
str(SSIlog)
SSIlog$video <- as.factor(SSIlog$video)
SSIlog <- SSIlog[-which(SSIlog$video=="Name"),]
SSIlog$Interval <- NULL
SSIlog <- rename (SSIlog, c("video" = "family"))
SSIlog <- rename (SSIlog, c("X" = "SSI-interval"))
SSInoLog <- data.frame(video="Name")
for (file in SSInoLogFilesList){
#    print(file)
SSIalone <- read.csv(file)
#  print(str(SSIalone))
SSInoLog<- rbind.fill(SSInoLog, SSIalone)}
SSInoLog$video <-as.factor(SSInoLog$video)
SSInoLog <- SSInoLog[-which(SSInoLog$video=="Name"),]
SSInoLog$Interval <- NULL
SSInoLog <- rename (SSIlog, c("video" = "family"))
SSInoLog <- rename (SSIlog, c("X" = "SSI-interval"))
#SSInoLog$action <- rep(NA, nrow(SSInoLog))
#SSInoLog[which(video == & timeMin==)]$action
str(SSInoLog)
warnings()
MeanMotionNoConflict <- c(
mean(data[which(data$LabelVideo=="No Conflict"),]$father, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$mother, na.rm=TRUE),
mean(data[which(data$LabelVideo=="No Conflict"),]$child, na.rm=TRUE))
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
psycho$Birthday <- as.Date(psycho$Birthday, format="%d/%m/%y")
psycho$interview_date <- as.Date(psycho$interview_date, format="%d/%m/%y")
str(psycho$Birthday )
str(psycho$interview_date)
psycho$age <- (psycho$interview_date-psycho$Birthday)/365.25
par(mar=c(3,4,4,4))
hist(as.numeric(psycho$age), col="green")
rm(list = ls(all.names = TRUE))
library("lme4")
## For managing data frames easilly : rbinds function
library("plyr")
## For editing string
library("stringr")
FileExtension <- ".MTS.avi_res.csv"
# working directory
# where this report is
setwd("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Git/Monrado/Reports/")
# blue will refer to father
# red will refer to mother
# green to child
colOrderList <- c("blue","red", "green")
ParticipantsList <- c("father", "mother", "child")
```
FullNameList <- list.files("../Data/CSV/raw", full.names=TRUE)
FullNameList
## Create a csv files list without the directories
filesList <- list.files("../Data/CSV/raw", full.names=FALSE)
filesList
importdata <-function(FullnameList){
data <- c()
for (i in FullnameList){
dataAlone <- read.csv(i)
mydata.nas <- apply(dataAlone[,c(2:5)], 1, function(x){all(is.na(x))})
# delete NA created by th conversion process
dataAlone <- dataAlone[!mydata.nas,]
print(i)
data <- rbind(data, dataAlone)
}
return (data)
}
MeanMotionByTime <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data){
x <- c()
for (fam in families[indexOfvideos]){
dataVector <- data[which(data$family==fam), subject]
## with ceiling : superior limit of the round
IntervalNumbersVideo <- ceiling(length(dataVector)/interval)
for (i in 1:IntervalNumbersVideo){
borneinf<- 1+(i-1)*interval
bornesup <-i*interval
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
SlidingInterval <- function(subject, indexOfvideos=1:NumberOfvideos, interval, data)
{x <- c()
for (file in families[indexOfvideos]){
dataVector <- data[which(data$family==file), subject]
NBofAnalysedFrames <- length(dataVector)-interval+1
for (i in 1:NBofAnalysedFrames){
borneinf <- (i)
bornesup <-(interval-1+i)
dataVectorInterval <- dataVector[borneinf:bornesup]
mean <- mean(dataVectorInterval, na.rm=TRUE)
x <- c(x, mean)}}
return (x)}
data <- importdata(FullNameList)
data$therapist <- NULL
# compute time in minute
data$timeMin <- data$frame/(25*60)
## Create a list of files without the extention of the video
families <- c()
for (i in filesList){
name <- sub(FileExtension, "", i)
families <- c(families, name)
}
families
NumberOfvideos <- length(families)
NumberOfvideos
# create a list with the simplified dname (whitout extension), make a data frame of it  and merge 2 data frames
a <- data.frame(family = families, unique(data$file))
data <- merge(data, a, by.x="file", by.y="unique.data.file.")
# Compute log
data$fatherShifted <- data$father + min(data$father[which (data$father >0)])/2
data$logFather <- log(data$fatherShifted)
data$motherShifted <- data$mother + min(data$mother[which (data$mother >0)])/2
data$logMother <- log(data$motherShifted)
data$childShifted <- data$child + min(data$child[which (data$child >0)])/2
data$logChild <- log(data$childShifted)
data <- data[,c("family", "frame", "timeMin", "child", "childShifted", "logChild", "father", "fatherShifted", "logFather", "mother", "motherShifted", "logMother")]
data$file <- NULL
cutFrames <- read.csv2("../Data/CSV/Cutframes.csv")
str(cutFrames)
# Change the vector in character and cut the sting in two parts minutes and second for the 4 time labels ("CutBefore"  "CutMiddle1" "CutMiddle2" "CutFinal")
cutFrames$CutBefore <- as.character(cutFrames$CutBefore)
cutFramesCB <- strsplit(cutFrames$CutBefore, split=":")
# Compute the time in minutes from time in minutes and seconds for each video for Cut Before
Cut <- c()
for (i in 1:nrow(cutFrames)){
CutBeforeAlone <- (as.numeric(cutFramesCB[i][[1]][1]) + as.numeric(cutFramesCB[i][[1]][2])/60)
Cut <- c(Cut, CutBeforeAlone)
}
cutFrames$CutBeforeMin <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle1
Cut <- c()
cutFrames$CutMiddle1 <- as.character(cutFrames$CutMiddle1)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle1, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle1Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutMiddle2
Cut <- c()
cutFrames$CutMiddle2 <- as.character(cutFrames$CutMiddle2)
cutMiddleSplit <- strsplit(cutFrames$CutMiddle2, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutMiddleSplit[i][[1]][1]) + as.numeric(cutMiddleSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutMiddle2Min <- Cut
# Compute the time in minutes from time in minutes and seconds for each video for Cut CutFinal
Cut <- c()
cutFrames$CutFinal <- as.character(cutFrames$CutFinal)
cutSplit <- strsplit(cutFrames$CutFinal, split=":")
for (i in 1:nrow(cutFrames)){
CutAlone <- (as.numeric(cutSplit[i][[1]][1]) + as.numeric(cutSplit[i][[1]][2])/60)
Cut <- c(Cut, CutAlone)
}
cutFrames$CutFinalMin <- Cut
Cut <- c()
psycho <- read.csv2("/Users/Ofix/Documents/Fac/internat/Recherche/projets/synchro/synchroData/Monrado/Data/CSV/PsychomotData.csv")
# replace 1 code by male and 2 by female
psycho$Sex[which(psycho$Sex == 1 )] <- "male"
psycho$Sex[which(psycho$Sex == 2 )] <- "female"
psycho$Birth_place <- as.character(psycho$Birth_place)
# Clean Besancon town name with a special character
psycho$Birth_place[which(psycho$Birth_place =="Besan\x8don")] <- "Besancon"
psycho$Num_identification <- NULL
psycho$Sex <- NULL
psycho$TASDF <- NULL
psycho$TASIF <- NULL
psycho$TASEOT<- NULL
psycho <- rename (psycho, c("Num._ident_videos" = "family"))
#View(psycho)
data <- merge(data, cutFrames, by.x="family", by.y="family")
data <- merge(data, psycho, by.x="family", by.y="family")
# reorder by family, then by frame order
data <- data[order(data$family, data$frame),]
# Create a column corresponding to the phase of the video for each time limit
data$LabelVideo <- rep(NA, nrow(data))
data[which(data$timeMin <= data$CutBeforeMin),]$LabelVideo <- "Cut"
data[which(data$timeMin >= data$CutMiddle1Min & data$timeMin <= data$CutMiddle2Min),]$LabelVideo <- "Cut"
data[which(data$timeMin > data$CutBeforeMin & data$timeMin < data$CutMiddle1Min),]$LabelVideo <- "No Conflict"
data[which(data$timeMin > data$CutMiddle2Min & data$timeMin < data$CutFinalMin),]$LabelVideo <- "Conflict"
data[which(data$timeMin >= data$CutFinalMin),]$LabelVideo <- "Cut"
str(data)
psycho$Birthday <- as.Date(psycho$Birthday, format="%d/%m/%y")
psycho$interview_date <- as.Date(psycho$interview_date, format="%d/%m/%y")
str(psycho$Birthday )
str(psycho$interview_date)
psycho$age <- (psycho$interview_date-psycho$Birthday)/365.25
par(mar=c(3,4,4,4))
hist(as.numeric(psycho$age), col="green")
hist(as.numeric(psycho$age), col="green", main="age")
hist(as.numeric(psycho$age), col="green", main="Age of the teenagers")
par(mar=c(5,4,4,4))
barplot(sort(table(psycho$Birth_place), decreasing = TRUE ), las=2, cex.names=0.5, main="Birth place")
```
barplot(sort(table(psycho$Birth_place), decreasing = TRUE ), las=2, cex.names=0.5, main="Birth place"; col="yellow")
barplot(sort(table(psycho$Birth_place), decreasing = TRUE ), las=2, cex.names=0.5, main="Birth place"; col="yellow")
barplot(sort(table(psycho$Birth_place), decreasing = TRUE ), las=2, cex.names=0.5, main="Birth place", col="yellow")
par(mar=c(9,5,3,3))
barplot(table(psycho$attachement_style), las=2, cex.names=0.6)
barplot(table(psycho$attachement_style), las=2, cex.names=0.6, col="blue")
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornblue")
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue")
par(mar=c(9,5,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue")
```
par(mar=c(3,5,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue")
par(mar=c(5,5,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue")
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Attachement style in cluster")
par(mar=c(3,5,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Attachement style after clustering")
par(mar=c(5,3,3,3))
barplot(table(psycho$attachement_cluster), las=2, cex.names=0.6, col="cornflowerblue", main="Attachement style after clustering")
par(mar=c(9,5,3,3))
barplot(table(psycho$insecurite_level), las=2)
par(mar=c(3,3,3,3))
barplot(table(psycho$TAS_total), las=2, col="orange", main="Distribution of the TAS scores", cex.name=0.9)
hist(psycho$TAS_total, las=1, col="orange", main="Distribution of the TAS scores")
```
par(mar=c(3,3,3,3))
barplot(table(psycho$STAIYA_total), las=2, col="blue", main="Distribution of the STAIYA scores")
hist(psycho$STAIYA_total, las=1, col="blue", main="Distribution of the STAIYA scores")
```
par(mar=c(3,3,3,3))
barplot(table(psycho$STAIYB_total), las=2, col="red", main="Distribution of the STAIYB scores")
hist(psycho$STAIYB_total, las=1, col="red", main="Distribution of the STAIYA scores")
par(mar=c(3,3,3,3))
barplot(table(psycho$BDI_total), las=2, col="green", main="Distribution of the BDI scores")
hist(psycho$BDI_total, las=1, col="green", main="Distribution of the BDI scores")
```
